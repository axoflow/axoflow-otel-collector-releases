name: Reusable GoReleaser CI workflow

on:
  workflow_call:
    inputs:
      distribution:
        required: true
        type: string
      goos:
        required: true
        type: string
      goarch:
        required: true
        type: string

env:
  # renovate: datasource=github-tags depName=goreleaser-pro packageName=goreleaser/goreleaser-pro
  GORELEASER_PRO_VERSION: v2.7.0

jobs:
  check-goreleaser:
    strategy:
      matrix:
        GOOS: ${{ fromJSON( inputs.goos) }}
        GOARCH: ${{ fromJSON( inputs.goarch) }}
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup QEMU
        uses: docker/setup-qemu-action@4574d27a4764455b42196d70a065bc6853246a25 # v3.4.0
        with:
          platforms: arm64

      - name: Setup wixl # Required to build MSI packages for Windows
        if: ${{ matrix.GOOS == 'windows' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y wixl gcc-mingw-w64-x86-64-win32

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0

      - name: Setup Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: "~1.24"
          check-latest: true

      - name: Generate the sources for ${{ inputs.distribution }}
        env:
          DISTRIBUTIONS: ${{ inputs.distribution }}
        run: make generate-sources

      - name: Run GoReleaser for ${{ inputs.distribution }}
        uses: goreleaser/goreleaser-action@90a3faa9d0182683851fbfa97ca1a2cb983bfca3 # v6.2.1
        with:
          distribution: goreleaser-pro
          version: ${{ env.GORELEASER_PRO_VERSION }}
          workdir: distributions/${{ inputs.distribution }}
          args: --snapshot --clean --skip=sign,sbom --timeout 2h --split
        env:
          GOOS: ${{ matrix.GOOS }}
          GOARCH: ${{ matrix.GOARCH }}
          GOAMD64: v1
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Print built artifacts
        run: cat ./distributions/${{ inputs.distribution }}/dist/**/artifacts.json

      - name: Print dist folder contents
        if: always()
        run: ls -laR ./distributions/${{ inputs.distribution }}/dist

      - name: Upload linux service packages
        if: ${{ matrix.GOOS == 'linux' && matrix.GOARCH == 'amd64' }}
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: linux-packages
          path: distributions/${{ inputs.distribution }}/dist/linux_amd64_v1/*
          if-no-files-found: error

      - name: Upload MSI packages
        if: ${{ matrix.GOOS == 'windows' && matrix.GOARCH == 'amd64' }}
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: msi-packages
          path: distributions/${{ inputs.distribution }}/dist/windows_amd64_v1/**/*.msi
          if-no-files-found: error
