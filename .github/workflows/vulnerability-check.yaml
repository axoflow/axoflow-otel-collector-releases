name: Vulnerability check
on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]
  release:
    types: [published]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  GOPRIVATE: github.com/axoflow/*
  GONOSUMDB: github.com/axoflow/*

jobs:
  trivy:
    name: Trivy scan
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: "~1.24"
          check-latest: true

      - name: Setup private module access
        env:
          DEPLOY_KEY_PRIVATE_FOR_AXO_ETW: ${{ secrets.DEPLOY_KEY_PRIVATE_FOR_AXO_ETW}}
        run: |
          ./scripts/prepare-private-modules-gha.sh

      - name: Run make generate
        run: make generate
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@18f2510ee396bbf400402947b394f2dd8c87dbb0 # 0.29.0
        with:
          scan-type: repo
          format: json
          output: trivy-report.json
          exit-code: 0
          scanners: "vuln,secret,misconfig"
        env:
          TRIVY_IGNOREFILE: .trivyignore.yaml
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      - name: Generate GitHub summary
        id: summary
        run: |
          echo "# Trivy Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          HIGH_COUNT=$(grep -o '"Severity": "HIGH"' trivy-report.json | wc -l)
          CRITICAL_COUNT=$(grep -o '"Severity": "CRITICAL"' trivy-report.json | wc -l)
          MEDIUM_COUNT=$(grep -o '"Severity": "MEDIUM"' trivy-report.json | wc -l)
          LOW_COUNT=$(grep -o '"Severity": "LOW"' trivy-report.json | wc -l)
          TOTAL_COUNT=$((HIGH_COUNT + CRITICAL_COUNT + MEDIUM_COUNT + LOW_COUNT))
          
          # Create variables for next steps
          echo "HIGH_COUNT=$HIGH_COUNT" >> $GITHUB_OUTPUT
          echo "CRITICAL_COUNT=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "MEDIUM_COUNT=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
          echo "LOW_COUNT=$LOW_COUNT" >> $GITHUB_OUTPUT
          echo "TOTAL_COUNT=$TOTAL_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$TOTAL_COUNT" -eq 0 ]; then
            echo "## 🎉 No vulnerabilities detected!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 📊 Summary" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "| -------- | ----- |" >> $GITHUB_STEP_SUMMARY
            echo "| 🔴 CRITICAL | $CRITICAL_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟠 HIGH | $HIGH_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟡 MEDIUM | $MEDIUM_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟢 LOW | $LOW_COUNT |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📄 See the full report in the workflow artifacts." >> $GITHUB_STEP_SUMMARY

      - name: Upload scan results
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: trivy-scan-results
          path: trivy-report.json

      - name: Add comment to pull request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const securityScanComments = comments.filter(comment => 
              comment.body.includes('## 🔍 Trivy Security Scan Results')
            );
            for (const comment of securityScanComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
            }

            let commentBody;
            if ('${{ steps.summary.outputs.TOTAL_COUNT }}' === '0') {
              commentBody = `## 🔍 Trivy Security Scan Results

            🎉 No vulnerabilities detected!

            📄 See the full report in the workflow artifacts.`;
            } else {
              commentBody = `## 🔍 Trivy Security Scan Results

            | Severity | Count |
            | -------- | ----- |
            | 🔴 CRITICAL | ${{ steps.summary.outputs.CRITICAL_COUNT }} |
            | 🟠 HIGH | ${{ steps.summary.outputs.HIGH_COUNT }} |
            | 🟡 MEDIUM | ${{ steps.summary.outputs.MEDIUM_COUNT }} |
            | 🟢 LOW | ${{ steps.summary.outputs.LOW_COUNT }} |

            📄 See the full report in the workflow artifacts.`;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

      - name: Create issue for release
        if: github.event_name == 'release'
        uses: actions/github-script@v7
        with:
          script: |
            const releaseTag = context.payload.release.tag_name;
            
            let issueBody;
            if ('${{ steps.summary.outputs.TOTAL_COUNT }}' === '0') {
              issueBody = `## 🔍 Security Scan for Release ${releaseTag}

            🎉 No vulnerabilities detected!

            📄 See the full report in the workflow artifacts of the release workflow.

            This is an automatically generated security report for release ${releaseTag}.`;
            } else {
              issueBody = `## 🔍 Security Scan for Release ${releaseTag}

            | Severity | Count |
            | -------- | ----- |
            | 🔴 CRITICAL | ${{ steps.summary.outputs.CRITICAL_COUNT }} |
            | 🟠 HIGH | ${{ steps.summary.outputs.HIGH_COUNT }} |
            | 🟡 MEDIUM | ${{ steps.summary.outputs.MEDIUM_COUNT }} |
            | 🟢 LOW | ${{ steps.summary.outputs.LOW_COUNT }} |

            📄 See the full report in the workflow artifacts of the release workflow.

            This is an automatically generated security report for release ${releaseTag}.`;
            }
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security Scan Results for Release ${releaseTag}`,
              body: issueBody,
              labels: ['security', 'automated-report']
            });
